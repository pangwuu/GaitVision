name: Test Website

on:
  push:
    branches: [ main, testing-website ]   
    paths:
      - 'Website/**'                      
      - '.github/workflows/test_website.yaml'
  pull_request:
    branches: [ main ]                    
    paths:
      - 'Website/**'

concurrency:
  group: test-website-${{ github.ref }}
  cancel-in-progress: true

jobs:
  client-tests:
    name: Client (React) - unit tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Website/client

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: Website/client/package-lock.json

      - name: Install deps
        run: npm ci

      - name: Lint (optional)
        if: ${{ hashFiles('Website/client/.eslintrc*') != '' }}
        run: |
          npm run lint || echo "eslint not configured or lint failed (non-blocking)"

      - name: Run unit tests
        run: npm test -- --watchAll=false

      - name: Upload coverage (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: client-coverage
          path: Website/client/coverage
          if-no-files-found: ignore

  flask-tests:
    name: Flask server - tests & lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Website/flask-server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            # fallback: minimal deps to run tests
            pip install flask pytest
          fi

      - name: Run pytest if tests exist
        run: |
          if ls -1 test_*.py *_test.py 2>/dev/null | grep -q .; then
            pytest -q
          else
            echo "No pytest files found, skipping."
          fi

      - name: Lint with flake8 (optional, non-blocking)
        run: |
          pip install flake8 || true
          flake8 . || true
