name: Test and Build PCA Pipeline

on:
  push:
    branches:
      - main
      - PcaPipeline
    tags:
      - 'v*'  # This tag trigger is for the build job only
  pull_request:
    branches:
      - main
      - PcaPipeline

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyqt5 xvfb libx11-xcb1 libxcb1 libx11-dev libxext-dev libxrender-dev libxcb-xinerama0
          python -m pip install --upgrade pip
          pip install -r PCA/requirements.txt
          
      - name: Run tests and check output
        run: |
          python PCA/pca_test.py | grep -q "All tests passed!"

  build_windows:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: run_tests
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r PCA/requirements.txt
          pip install pyinstaller
          
      - name: Run PyInstaller (Windows)
        run: |
          cd PCA
          pyinstaller pca_pipeline.py --onefile --windowed --name "PCA_Analysis_Tool"          
          
      - name: Verify build output
        run: |
          dir PCA\dist\
          
      - name: Create Windows release archive
        run: |
          cd PCA/dist
          7z a PCA_Analysis_Tool-windows.zip PCA_Analysis_Tool.exe
          
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: pca-analysis-tool-windows
          path: PCA/dist/PCA_Analysis_Tool-windows.zip
          retention-days: 30

  build_macos:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: run_tests
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r PCA/requirements.txt
          pip install pyinstaller
          
      - name: Run PyInstaller (macOS)
        run: |
          cd PCA
          pyinstaller pca_pipeline.py --windowed --name "PCA_Analysis_Tool" --target-arch arm64
          
      - name: Verify build output
        run: |
          ls -la PCA/dist/
          
      - name: Create macOS release archive
        run: |
          cd PCA/dist
          zip -r PCA_Analysis_Tool-macos.zip PCA_Analysis_Tool
          
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: pca-analysis-tool-macos
          path: PCA/dist/PCA_Analysis_Tool-macos.zip
          retention-days: 30

  build_linux:
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: run_tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pyqt5 xvfb
          python -m pip install --upgrade pip
          pip install -r PCA/requirements.txt
          pip install pyinstaller
          
      - name: Run PyInstaller (Linux)
        run: |
          cd PCA
          xvfb-run -a pyinstaller pca_pipeline.py --windowed --name "PCA_Analysis_Tool"
          
      - name: Verify build output
        run: |
          ls -la PCA/dist/
          
      - name: Create Linux release archive
        run: |
          cd PCA/dist
          tar -czf PCA_Analysis_Tool-linux.tar.gz PCA_Analysis_Tool
          
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: pca-analysis-tool-linux
          path: PCA/dist/PCA_Analysis_Tool-linux.tar.gz
          retention-days: 30

  create_release:
    permissions:
      contents: write  
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build_windows, build_macos, build_linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          
      - name: List downloaded files
        run: ls -la
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            PCA_Analysis_Tool-windows.zip
            PCA_Analysis_Tool-macos.zip
            PCA_Analysis_Tool-linux.tar.gz
          name: PCA Analysis Tool ${{ github.ref_name }}
          body: |
            ## PCA Analysis Tool Release ${{ github.ref_name }}
            
            Cross-platform release with executables for Windows, macOS, and Linux.
            
            ### Downloads:
            - **Windows**: `PCA_Analysis_Tool-windows.zip` - Extract and run the `.exe` file
            - **macOS**: `PCA_Analysis_Tool-macos.zip` - Extract and run (Universal binary for Intel & Apple Silicon)
            - **Linux**: `PCA_Analysis_Tool-linux.tar.gz` - Extract and run the executable
            
            ### Installation Instructions:
            
            #### Windows:
            1. Download `PCA_Analysis_Tool-windows.zip`
            2. Extract the zip file
            3. Run `PCA_Analysis_Tool.exe`
            
            #### macOS:
            1. Download `PCA_Analysis_Tool-macos.zip`
            2. Extract the zip file
            3. Right-click the executable and select "Open" (first time only)
            4. macOS may show security warnings - click "Open" to proceed
            
            #### Linux:
            1. Download `PCA_Analysis_Tool-linux.tar.gz`
            2. Extract: `tar -xzf PCA_Analysis_Tool-linux.tar.gz`
            3. Make executable: `chmod +x PCA_Analysis_Tool`
            4. Run: `./PCA_Analysis_Tool`
            
            ### Requirements:
            - **Windows**: Windows 10 or later
            - **macOS**: macOS 10.14 or later
            - **Linux**: Most modern distributions (built on Ubuntu)
            
            ### Notes:
            - All executables are self-contained and don't require Python installation
            - First launch may be slower as the application initializes
          draft: true
          prerelease: true